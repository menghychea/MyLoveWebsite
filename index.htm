<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Happy Birthday!</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #fce7f3;
            /* Light pink background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            /* Full viewport height */
            margin: 0;
            padding: 20px;
            /* Add some padding for smaller screens */
            box-sizing: border-box;
        }

        .container {
            background-color: #ffffff;
            /* White card background */
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 30px;
            text-align: center;
            max-width: 600px;
            /* Max width for the content area */
            width: 100%;
            /* Full width on smaller screens */
        }

        .cake-graphic {
            /* Re-added style for static cake image */
            width: 100%;
            /* Make image responsive */
            max-width: 350px;
            /* Slightly larger max width for the cake graphic */
            height: auto;
            margin: 0 auto 25px auto;
            /* Center the image and add margin */
            display: block;
            /* Ensure it behaves like a block element for margin auto */
            border-radius: 15px;
            /* Apply rounded corners */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            /* Add a subtle shadow */
        }

        .message-text {
            color: #d946ef;
            /* Purple text for the message */
            margin-bottom: 30px;
            line-height: 1.4;
        }

        .start-button {
            background-color: #f472b6;
            /* Pink button */
            color: white;
            padding: 15px 30px;
            border-radius: 10px;
            font-weight: 600;
            font-size: 1.1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
            display: inline-block;
            /* To allow padding and transform */
            cursor: pointer;
            /* Indicate it's clickable */
        }

        .start-button:hover {
            background-color: #ec4899;
            /* Darker pink on hover */
            transform: translateY(-3px);
            /* Slight lift effect */
        }

        /* Responsive adjustments for smaller screens */
        @media (max-width: 640px) {
            .container {
                padding: 20px;
            }

            .message-text h1 {
                font-size: 2rem;
                /* Adjust font size for smaller screens */
            }

            .message-text p {
                font-size: 1rem;
            }

            .start-button {
                padding: 12px 25px;
                font-size: 1rem;
            }
        }

        /* Styles for Unlock Page */
        .unlock-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 30px;
            width: 100%;
            max-width: 900px;
            /* Wider container for two columns */
            display: flex;
            /* Use flexbox for layout */
            flex-direction: column;
            /* Stack columns on small screens */
            gap: 30px;
            /* Space between columns */
        }

        @media (min-width: 768px) {

            /* On medium screens and up, make it a row */
            .unlock-container {
                flex-direction: row;
            }
        }

        .column {
            flex: 1;
            /* Each column takes equal space */
            padding: 20px;
            border-radius: 15px;
            background-color: #fff;
            /* Ensure columns have white background */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        .photo-collage {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            /* 2 columns for photos */
            gap: 10px;
            /* Space between photos */
            width: 100%;
        }

        .photo-collage img {
            width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            object-fit: cover;
            /* Ensure images cover their area */
            aspect-ratio: 1 / 1;
            /* Keep photos square */
        }

        .message-text {
            color: #d946ef;
            /* Purple text for the message */
            margin-bottom: 30px;
            line-height: 1.4;
        }

        .start-button {
            background-color: #f472b6;
            /* Pink button */
            color: white;
            padding: 15px 30px;
            border-radius: 10px;
            font-weight: 600;
            font-size: 1.1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
            display: inline-block;
            /* To allow padding and transform */
            cursor: pointer;
            /* Indicate it's clickable */
        }

        .start-button:hover {
            background-color: #ec4899;
            /* Darker pink on hover */
            transform: translateY(-3px);
            /* Slight lift effect */
        }

        /* Responsive adjustments for smaller screens */
        @media (max-width: 640px) {
            .container {
                padding: 20px;
            }

            .message-text h1 {
                font-size: 2rem;
                /* Adjust font size for smaller screens */
            }

            .message-text p {
                font-size: 1rem;
            }

            .start-button {
                padding: 12px 25px;
                font-size: 1rem;
            }
        }

        /* Styles for Unlock Page */
        .unlock-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 30px;
            width: 100%;
            max-width: 900px;
            /* Wider container for two columns */
            display: flex;
            /* Use flexbox for layout */
            flex-direction: column;
            /* Stack columns on small screens */
            gap: 30px;
            /* Space between columns */
        }

        @media (min-width: 768px) {

            /* On medium screens and up, make it a row */
            .unlock-container {
                flex-direction: row;
            }
        }

        .column {
            flex: 1;
            /* Each column takes equal space */
            padding: 20px;
            border-radius: 15px;
            background-color: #fff;
            /* Ensure columns have white background */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        .photo-collage {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            /* 2 columns for photos */
            gap: 10px;
            /* Space between photos */
            width: 100%;
        }

        .photo-collage img {
            width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            object-fit: cover;
            /* Ensure images cover their area */
            aspect-ratio: 1 / 1;
            /* Keep photos square */
        }

        /* --- Keypad Specific Styles (Updated) --- */
        .keypad-display {
            background-color: #ffffff;
            /* White background for display */
            border: 2px solid #fbcfe8;
            /* Light pink border */
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            font-size: 2.5rem;
            font-weight: bold;
            color: #d946ef;
            /* Purple text */
            min-height: 70px;
            display: flex;
            justify-content: center;
            align-items: center;
            letter-spacing: 5px;
            /* Spacing for the numbers/dots */
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.06);
            /* Inner shadow for depth */
            width: 100%;
            /* Ensure it takes full width of its container */
            max-width: 300px;
            /* Limit max width */
            transition: background-color 0.3s ease, border-color 0.3s ease;
            /* Smooth transition for color change */
        }

        .keypad-display.correct {
            background-color: #dcfce7;
            /* Light green for correct */
            border-color: #22c55e;
            /* Green border */
            color: #16a34a;
            /* Darker green text */
        }

        .keypad-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            /* Increased gap for better spacing */
            width: 100%;
            max-width: 300px;
            /* Max width for keypad */
            margin-top: 20px;
        }

        .keypad-button {
            background-color: #ffe4e6;
            /* Very light pink/off-white for buttons */
            color: #d946ef;
            /* Darker pink/purple text */
            padding: 20px 0;
            border-radius: 15px;
            font-size: 1.8rem;
            /* Slightly larger font for numbers */
            font-weight: 700;
            /* Bolder numbers */
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            /* More prominent shadow */
            border: 1px solid #fbcfe8;
            /* Subtle border */
        }

        .keypad-button:hover {
            background-color: #fed7aa;
            /* Slightly darker on hover (peach tone) */
            transform: translateY(-3px);
            /* More pronounced lift */
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .keypad-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            background-color: #fbcfe8;
            /* Even darker on active */
        }

        .keypad-button.clear-button {
            background-color: #fef08a;
            /* Lighter yellow for clear */
            color: #d97706;
            /* Darker orange text */
        }

        .keypad-button.clear-button:hover {
            background-color: #fcd34d;
        }

        .keypad-button.back-button {
            background-color: #bfdbfe;
            /* Lighter blue for backspace */
            color: #2563eb;
            /* Darker blue text */
        }

        .keypad-button.back-button:hover {
            background-color: #93c5fd;
        }

        /* --- End Keypad Specific Styles (Updated) --- */

        .error-message {
            color: #ef4444;
            /* Red for error messages */
            margin-top: 10px;
            font-size: 0.9rem;
            min-height: 20px;
            /* Reserve space to prevent layout shift */
        }

        /* Styles for Order Page (Menu of Our Love) */
        .order-content-card {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 40px;
            max-width: 800px;
            /* Wider for the 2x2 grid */
            width: 100%;
            text-align: center;
        }

        .order-content-card h1 {
            color: #d946ef;
            font-size: 3rem;
            margin-bottom: 10px;
            /* Less margin to fit subtitle */
        }

        .order-content-card .subtitle {
            color: #f472b6;
            /* Pink subtitle */
            font-size: 1.2rem;
            margin-bottom: 30px;
        }

        .menu-grid {
            display: grid;
            grid-template-columns: repeat(1, 1fr);
            /* Single column on small screens */
            gap: 20px;
            /* Space between boxes */
            margin-top: 20px;
        }

        @media (min-width: 640px) {

            /* 2 columns on medium screens and up */
            .menu-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        .menu-box {
            background-color: #ffe4e6;
            /* Light pink background for boxes */
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            min-height: 150px;
            /* Ensure consistent height */
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            cursor: pointer;
        }

        .menu-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        }

        .menu-box h3 {
            color: #d946ef;
            /* Purple for title */
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .menu-box p {
            color: #6b7280;
            font-size: 0.95rem;
            line-height: 1.4;
        }

        .menu-box .icon {
            font-size: 2.5rem;
            /* Icon size */
            color: #f472b6;
            /* Pink icon color */
            margin-bottom: 10px;
        }

        /* Styles for Memories Page */
        .memories-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 30px;
            max-width: 700px;
            width: 100%;
            text-align: center;
            position: relative;
            /* For slider controls */
        }

        .memories-container h1 {
            color: #d946ef;
            font-size: 3rem;
            margin-bottom: 20px;
        }

        .memories-slider {
            position: relative;
            width: 100%;
            overflow: hidden;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .slider-wrapper {
            display: flex;
            transition: transform 0.5s ease-in-out;
        }

        .slider-wrapper img {
            width: 100%;
            flex-shrink: 0;
            /* Prevent images from shrinking */
            border-radius: 15px;
            height: auto;
            object-fit: cover;
            aspect-ratio: 11 / 14;
            /* Updated aspect ratio */
        }

        .slider-controls {
            position: absolute;
            top: 50%;
            width: 100%;
            display: flex;
            justify-content: space-between;
            transform: translateY(-50%);
            padding: 0 10px;
            pointer-events: none;
            /* Allow clicks to pass through */
        }

        .slider-button {
            background-color: rgba(244, 114, 182, 0.7);
            /* Semi-transparent pink */
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            pointer-events: auto;
            /* Re-enable clicks for buttons */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .slider-button:hover {
            background-color: rgba(236, 72, 153, 0.9);
            /* Darker pink on hover */
        }

        .back-to-menu {
            background-color: #f472b6;
            color: white;
            padding: 10px 20px;
            border-radius: 10px;
            font-weight: 600;
            margin-top: 20px;
            display: inline-block;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .back-to-menu:hover {
            background-color: #ec4899;
        }

        /* Styles for Love Calendar Page */
        .calendar-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 30px;
            max-width: 700px;
            width: 100%;
            text-align: center;
        }

        .calendar-container h1 {
            color: #d946ef;
            font-size: 3rem;
            margin-bottom: 20px;
        }

        .profile-picture {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 5px solid #fbcfe8;
            /* Light pink border */
            margin: 0 auto 20px auto;
            display: block;
            cursor: pointer;
            /* Indicate it's clickable */
        }

        .countdown-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            /* 3 columns for larger screens */
            gap: 15px;
            margin-top: 20px;
            max-width: 400px;
            /* Limit width of countdown */
            margin-left: auto;
            margin-right: auto;
        }

        @media (min-width: 480px) {

            /* Adjust to 6 columns on slightly larger screens */
            .countdown-grid {
                grid-template-columns: repeat(6, 1fr);
                max-width: 600px;
            }
        }

        .countdown-item {
            background-color: #ffe4e6;
            /* Light pink background */
            border-radius: 10px;
            padding: 15px 5px;
            /* Adjust padding for smaller numbers */
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .countdown-value {
            font-size: 2.2rem;
            font-weight: 700;
            color: #d946ef;
            line-height: 1;
            /* Adjust line height */
        }

        .countdown-label {
            font-size: 0.8rem;
            color: #6b7280;
            margin-top: 5px;
            text-transform: uppercase;
        }

        .love-text {
            color: #f472b6;
            font-size: 1.1rem;
            font-weight: 600;
            margin-top: 30px;
        }

        /* Styles for Our Love Year Page */
        .love-year-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 30px;
            max-width: 900px;
            /* Wider for the grid */
            width: 100%;
            text-align: center;
        }

        .love-year-container h1 {
            color: #d946ef;
            font-size: 3rem;
            margin-bottom: 20px;
        }

        .month-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            /* 2 columns on small screens */
            gap: 15px;
        }

        @media (min-width: 640px) {
            .month-grid {
                grid-template-columns: repeat(3, 1fr);
                /* 3 columns on medium screens */
            }
        }

        @media (min-width: 768px) {
            .month-grid {
                grid-template-columns: repeat(4, 1fr);
                /* 4 columns on larger screens */
            }
        }

        .month-item {
            background-color: #ffe4e6;
            /* Light pink background */
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            display: flex;
            flex-direction: column;
            align-items: center;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .month-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.12);
        }

        .month-item img {
            width: 100%;
            height: auto;
            /* Changed from fixed height */
            aspect-ratio: 4 / 3;
            /* Maintain aspect ratio */
            object-fit: cover;
            /* Cover the area, cropping if necessary */
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .month-item h3 {
            font-size: 1.1rem;
            font-weight: 600;
            color: #d946ef;
        }

        /* Styles for Image Detail Page (New) */
        .image-detail-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 30px;
            max-width: 800px;
            width: 100%;
            text-align: center;
        }

        .image-detail-container img {
            max-width: 100%;
            height: auto;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        /* Styles for Love Puzzle Page (New) */
        .puzzle-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 30px;
            max-width: 900px;
            /* Increased max-width to accommodate two columns comfortably */
            width: 100%;
            text-align: center;
        }

        .puzzle-container h1 {
            color: #d946ef;
            font-size: 3rem;
            margin-bottom: 20px;
        }

        .puzzle-content-wrapper {
            display: flex;
            flex-direction: column;
            /* Stack columns on small screens */
            gap: 20px;
            /* Space between columns */
            margin-bottom: 20px;
            /* Space before back button */
        }

        @media (min-width: 768px) {

            /* On medium screens and up, make it a row */
            .puzzle-content-wrapper {
                flex-direction: row;
                text-align: left;
                /* Align text within columns to left */
            }
        }

        .puzzle-column {
            flex: 1;
            /* Each column takes equal space */
            display: flex;
            flex-direction: column;
            align-items: center;
            /* Center content within each column */
            justify-content: center;
            padding: 10px;
            /* Add some padding inside columns */
        }

        .puzzle-area {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            /* 3x3 grid for puzzle pieces */
            gap: 5px;
            width: 100%;
            /* Make puzzle area take full width of its column */
            max-width: 300px;
            /* Limit max width of the puzzle area */
            margin: 0 auto;
            /* Center the grid within its column */
            border: 2px solid #fbcfe8;
            border-radius: 10px;
            overflow: hidden;
        }

        .puzzle-piece {
            width: 100%;
            /* Make piece take full width of its grid cell */
            padding-bottom: 100%;
            /* Maintain 1:1 aspect ratio for square pieces */
            position: relative;
            /* For absolute positioning of background */
            background-color: #ffe4e6;
            border: 1px solid #fce7f3;
            box-sizing: border-box;
            cursor: grab;
            transition: transform 0.1s ease;
            background-size: 300% 300%;
            /* For 3x3 grid */
            background-repeat: no-repeat;
            display: flex;
            /* To center text if any */
            justify-content: center;
            align-items: center;
            font-size: 0.8rem;
            color: #d946ef;
            font-weight: 600;
        }

        .puzzle-piece::before {
            /* Pseudo-element to hold background image */
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: var(--bg-image);
            /* Use CSS variable for image */
            background-position: var(--bg-position);
            /* Use CSS variable for position */
            background-size: var(--bg-size);
            /* Use CSS variable for size */
        }

        .puzzle-image-preview {
            width: 100%;
            max-width: 300px;
            /* Max width for the solved image */
            height: auto;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-top: 0;
            /* Remove top margin as it's now in a column */
        }

        .puzzle-solved-message {
            color: #22c55e;
            font-size: 1.5rem;
            font-weight: bold;
            margin-top: 10px;
            /* Adjust margin */
        }

        /* Styles for Surprise Page (New) */
        .surprise-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 40px;
            max-width: 600px;
            width: 100%;
            text-align: center;
            animation: fadeIn 1s ease-out;
            /* Simple fade-in animation */
        }

        .surprise-container h1 {
            color: #d946ef;
            font-size: 3.5rem;
            margin-bottom: 20px;
            animation: bounceIn 1s ease-out;
            /* Bounce effect for title */
        }

        .surprise-container p {
            color: #f472b6;
            font-size: 1.5rem;
            margin-bottom: 30px;
        }

        .surprise-emoji {
            font-size: 5rem;
            animation: pulse 1.5s infinite ease-in-out;
            /* Pulsing effect for emoji */
        }

        /* Keyframe Animations */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes bounceIn {
            0% {
                transform: scale(0.3);
                opacity: 0;
            }

            50% {
                transform: scale(1.05);
                opacity: 1;
            }

            70% {
                transform: scale(0.9);
            }

            100% {
                transform: scale(1);
            }
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.1);
            }

            100% {
                transform: scale(1);
            }
        }

        /* Styles for Love Notes Page */
        .love-notes-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 30px;
            max-width: 800px;
            width: 100%;
            text-align: center;
        }

        .love-notes-container h1 {
            color: #d946ef;
            font-size: 3rem;
            margin-bottom: 20px;
        }

        .love-notes-grid {
            display: grid;
            grid-template-columns: repeat(1, 1fr);
            gap: 20px;
            margin-top: 20px;
        }

        @media (min-width: 640px) {
            .love-notes-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (min-width: 768px) {
            .love-notes-grid {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        .note-card {
            background-color: #ffe4e6;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            text-align: left;
        }

        .note-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        }

        .note-card h3 {
            color: #d946ef;
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .note-card p {
            color: #6b7280;
            font-size: 0.9rem;
            line-height: 1.4;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            /* Add the standard property for compatibility */
            display: -webkit-box;
            /* Keep this for older WebKit */
            -webkit-line-clamp: 3;
            /* Keep this for older WebKit */
            -webkit-box-orient: vertical;
            /* Keep this for older WebKit */
            line-clamp: 3;
            /* Standard property */
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .modal-overlay.visible {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            max-width: 500px;
            width: 90%;
            text-align: center;
            position: relative;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }

        .modal-overlay.visible .modal-content {
            transform: translateY(0);
        }

        .modal-content h3 {
            color: #d946ef;
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 15px;
        }

        .modal-content p {
            color: #374151;
            font-size: 1.1rem;
            line-height: 1.6;
            margin-bottom: 20px;
            white-space: pre-wrap;
            /* Preserve line breaks */
        }

        .close-button {
            position: absolute;
            top: 15px;
            right: 15px;
            background: none;
            border: none;
            font-size: 1.8rem;
            color: #9ca3af;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .close-button:hover {
            color: #ef4444;
        }
    </style>
</head>

<body>
    <!-- Hidden Audio Element -->
    <audio id="birthdaySong" src="Image/Happy Birthday (Korean Version).mp3" preload="auto"></audio>
    <!-- You can replace the src with a different birthday song URL if you have one. -->

    <!-- Homepage Section -->
    <div id="homepage-section" class="container">
        <!-- Static Cake Image -->
        <img src="Image/Pink Red Refined Scrapbook Cake Poster.png" alt="Birthday Cake" class="cake-graphic">

        <!-- Birthday Message -->
        <div class="message-text">
            <h1 class="text-4xl md:text-5xl font-bold mb-4">Happy Birthday, My Love!</h1>
            <p class="text-lg md:text-xl">
                Get ready for a day filled with joy, surprises, and all the happiness you deserve.
            </p>
        </div>

        <!-- Start Button -->
        <button id="startButton" class="start-button">
            Start the Celebration!
        </button>
    </div>

    <!-- Unlock Page Section (Initially Hidden) -->
    <div id="unlock-section" class="unlock-container hidden">
        <!-- Left Column: Photo Collage -->
        <div class="column photo-column">
            <h2 class="text-3xl font-bold text-gray-800 mb-6">Our Special Memories</h2>
            <div class="photo-collage">
                <!-- Replace with your actual photo URLs -->
                <img src="Image/14.PNG" alt="Our Photo 1">
                <img src="Image/3.jpg" alt="Our Photo 2">
                <img src="Image/7.jpg" alt="Our Photo 3">
                <img src="Image/1.jpg" alt="Our Photo 4">
                <img src="Image/6.jpg" alt="Our Photo 5">
                <img src="Image/4.JPG" alt="Our Photo 6">
            </div>
            <p class="text-gray-600 mt-4">
                A little glimpse of our beautiful journey together.
            </p>
        </div>

        <!-- Right Column: Password Unlock with Keypad -->
        <div class="column password-column">
            <h2 class="text-3xl font-bold text-gray-800 mb-6">Birthday's Lock</h2>
            <p class="text-gray-600 mb-4">
                Enter the secret code to unlock your surprise!
            </p>
            <div class="keypad-display" id="keypadDisplay"></div>
            <div class="keypad-grid">
                <button class="keypad-button" data-value="1">1</button>
                <button class="keypad-button" data-value="2">2</button>
                <button class="keypad-button" data-value="3">3</button>
                <button class="keypad-button" data-value="4">4</button>
                <button class="keypad-button" data-value="5">5</button>
                <button class="keypad-button" data-value="6">6</button>
                <button class="keypad-button" data-value="7">7</button>
                <button class="keypad-button" data-value="8">8</button>
                <button class="keypad-button" data-value="9">9</button>
                <button class="keypad-button clear-button" data-value="clear">C</button>
                <button class="keypad-button" data-value="0">0</button>
                <button class="keypad-button back-button" data-value="back"><svg xmlns="http://www.w3.org/2000/svg"
                        width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-delete">
                        <path d="M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z" />
                        <path d="m14 9-6 6" />
                        <path d="m8 9 6 6" />
                    </svg></button>
            </div>
            <div id="errorMessage" class="error-message"></div>
        </div>
    </div>

    <!-- Order Page Section (Menu of Our Love) -->
    <div id="order-section" class="order-content-card hidden">
        <h1 class="text-center">Menu of Our Love</h1>
        <p class="subtitle text-center">
            <span class="text-pink-500">&hearts;</span> Special for you, my dearest <span
                class="text-pink-500">&hearts;</span>
        </p>

        <div class="menu-grid">
            <div class="menu-box" id="ourMemoriesBox">
                <span class="icon">&#128444;&#xFE0F;</span> <!-- Photo album emoji -->
                <h3>Our Memories</h3>
                <p>Every precious moment with you</p>
            </div>
            <div class="menu-box" id="loveCalendarBox">
                <span class="icon">&#128197;</span> <!-- Calendar emoji -->
                <h3>Love Calendar</h3>
                <p>Counting days of our love story</p>
            </div>
            <div class="menu-box" id="lovePuzzleBox">
                <span class="icon">&#129513;</span> <!-- Puzzle piece emoji -->
                <h3>Love Puzzle</h3>
                <p>Pieces that make us whole</p>
            </div>
            <div class="menu-box" id="loveNotesBox">
                <span class="icon">&#128140;</span> <!-- Love letter emoji -->
                <h3>Love Notes</h3>
                <p>Sweet messages just for you</p>
            </div>
        </div>
    </div>

    <!-- Our Memories Page Section (Initially Hidden) -->
    <div id="memories-section" class="memories-container hidden">
        <h1 class="text-center">Our Sweet Moments</h1>
        <div class="memories-slider">
            <div class="slider-wrapper" id="sliderWrapper">
                <!-- Replace with your actual memory photo URLs -->
                <img src="Image/11.jpg" alt="Memory Photo 1">
                <img src="Image/9.PNG" alt="Memory Photo 2">
                <img src="Image/8.jpg" alt="Memory Photo 3">
                <img src="Image/10.jpg" alt="Memory Photo 4">
            </div>
            <div class="slider-controls">
                <button class="slider-button" id="prevBtn">&lt;</button>
                <button class="slider-button" id="nextBtn">&gt;</button>
            </div>
        </div>
        <button id="backToMenuBtn" class="back-to-menu">Back to Menu</button>
    </div>

    <!-- Love Calendar Page Section (Initially Hidden) -->
    <div id="calendar-section" class="calendar-container hidden">
        <h1 class="text-center">Happy Birthday Journey</h1>
        <img src="Image/13.jpg" alt="Our Faces" class="profile-picture" id="ourFacesImage">


        <div class="countdown-grid">
            <div class="countdown-item">
                <span id="years" class="countdown-value">00</span>
                <span class="countdown-label">Years</span>
            </div>
            <div class="countdown-item">
                <span id="months" class="countdown-value">00</span>
                <span class="countdown-label">Months</span>
            </div>
            <div class="countdown-item">
                <span id="days" class="countdown-value">00</span>
                <span class="countdown-label">Days</span>
            </div>
            <div class="countdown-item">
                <span id="hours" class="countdown-value">00</span>
                <span class="countdown-label">Hours</span>
            </div>
            <div class="countdown-item">
                <span id="minutes" class="countdown-value">00</span>
                <span class="countdown-label">Minutes</span>
            </div>
            <div class="countdown-item">
                <span id="seconds" class="countdown-value">00</span>
                <span class="countdown-label">Seconds</span>
            </div>
        </div>
        <p class="love-text">
            We've been in love for... <br>
            <span class="text-pink-600 font-bold text-xl">
                &hearts; love u <span id="totalDays">3000</span> days &hearts;
            </span>
        </p>
        <button id="backToMenuFromCalendarBtn" class="back-to-menu">Back to Menu</button>
    </div>

    <!-- Our Love Year Page Section (Initially Hidden) -->
    <div id="love-year-section" class="love-year-container hidden">
        <h1 class="text-center">Our Love Year</h1>
        <div class="month-grid">
            <!-- January -->
            <div class="month-item" data-month-img="Image/3.jpg">
                <img src="Image/3.jpg" alt="January">
                <h3>January</h3>
            </div>
            <!-- February -->
            <div class="month-item" data-month-img="Image/8.jpg">
                <img src="Image/8.jpg" alt="February">
                <h3>February</h3>
            </div>
            <!-- March -->
            <div class="month-item" data-month-img="Image/7.jpg">
                <img src="Image/7.jpg" alt="March">
                <h3>March</h3>
            </div>
            <!-- April -->
            <div class="month-item" data-month-img="Image/1.jpg">
                <img src="Image/1.jpg" alt="April">
                <h3>April</h3>
            </div>
            <!-- May -->
            <div class="month-item" data-month-img="Image/12.jpg">
                <img src="Image/12.jpg" alt="May">
                <h3>May</h3>
            </div>
            <!-- June -->
            <div class="month-item" data-month-img="Image/6.jpg">
                <img src="Image/6.jpg" alt="June">
                <h3>June</h3>
            </div>
            <!-- July -->
            <div class="month-item" data-month-img="Image/14.jpg">
                <img src="Image/14.jpg" alt="July">
                <h3>July</h3>
            </div>
            <!-- August -->
            <div class="month-item" data-month-img="Image/4.JPG">
                <img src="Image/4.JPG" alt="August">
                <h3>August</h3>
            </div>
            <!-- September -->
            <div class="month-item" data-month-img="Image/5.JPG">
                <img src="Image/5.JPG" alt="September">
                <h3>September</h3>
            </div>
            <!-- October -->
            <div class="month-item" data-month-img="Image/14.PNG">
                <img src="Image/14.PNG" alt="October">
                <h3>October</h3>
            </div>
            <!-- November -->
            <div class="month-item" data-month-img="Image/10.jpg">
                <img src="Image/10.jpg" alt="November">
                <h3>November</h3>
            </div>
            <!-- December -->
            <div class="month-item" data-month-img="Image/11.jpg">
                <img src="Image/11.jpg" alt="December">
                <h3>December</h3>
            </div>
        </div>
        <button id="backToCalendarBtn" class="back-to-menu">Back to Calendar</button>
    </div>

    <!-- Image Detail Page Section (Initially Hidden) -->
    <div id="image-detail-section" class="image-detail-container hidden">
        <img id="detailImage" src="" alt="Detailed Image">
        <button id="backToLoveYearBtn" class="back-to-menu">Back to Love Year</button>
    </div>

    <!-- Love Puzzle Page Section (Initially Hidden) -->
    <div id="love-puzzle-section" class="puzzle-container hidden">
        <h1 class="text-center">Our Love Puzzle</h1>
        <p class="text-gray-600 mb-4">Drag and drop the pieces to complete our picture!</p>
        <div class="puzzle-content-wrapper">
            <!-- Left Column: Puzzle Area -->
            <div class="puzzle-column">
                <div class="puzzle-area" id="puzzleArea">
                    <!-- Puzzle pieces will be dynamically generated here -->
                </div>
            </div>
            <!-- Right Column: Image Preview -->
            <div class="puzzle-column">
                <!-- The puzzleSolvedImage is now visible by default as the target image -->
                <img id="puzzleSolvedImage" class="puzzle-image-preview" src="Image/3.jpg" alt="Completed Puzzle">
                <div id="puzzleSolvedMessage" class="puzzle-solved-message hidden">Puzzle Solved!</div>
            </div>
        </div>
        <button id="backToMenuFromPuzzleBtn" class="back-to-menu">Back to Menu</button>
    </div>

    <!-- Surprise Page Section (Initially Hidden) -->
    <div id="surprise-section" class="surprise-container hidden">
        <h1 class="text-center">Surprise!</h1>
        <p class="text-center">You've unlocked a special message!</p>
        <span class="surprise-emoji">&#127881;</span> <!-- Party popper emoji -->
        <p class="text-lg mt-4">"Every piece of our journey fits perfectly, just like this puzzle. Thank you for being
            my favorite person!"</p>
        <button id="backToMenuFromSurpriseBtn" class="back-to-menu">Back to Menu</button>
    </div>

    <!-- Love Notes Page Section (Initially Hidden) -->
    <div id="love-notes-section" class="love-notes-container hidden">
        <h1 class="text-center">Our Love Notes</h1>
        <p class="text-gray-600 mb-4">Tap on a note to read the full message!</p>
        <div class="love-notes-grid" id="loveNotesGrid">
            <!-- Love notes will be dynamically generated here -->
        </div>
        <button id="backToMenuFromNotesBtn" class="back-to-menu">Back to Menu</button>
    </div>

    <!-- Love Note Modal (Initially Hidden) -->
    <div id="noteModal" class="modal-overlay hidden">
        <div class="modal-content">
            <button class="close-button" id="closeModalBtn">&times;</button>
            <h3 id="modalTitle"></h3>
            <p id="modalText"></p>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const homepageSection = document.getElementById('homepage-section');
            const unlockSection = document.getElementById('unlock-section');
            const orderSection = document.getElementById('order-section');
            const memoriesSection = document.getElementById('memories-section');
            const calendarSection = document.getElementById('calendar-section');
            const loveYearSection = document.getElementById('love-year-section');
            const imageDetailSection = document.getElementById('image-detail-section');
            const lovePuzzleSection = document.getElementById('love-puzzle-section');
            const surpriseSection = document.getElementById('surprise-section');
            const loveNotesSection = document.getElementById('love-notes-section'); // New love notes section

            const startButton = document.getElementById('startButton');
            const birthdaySong = document.getElementById('birthdaySong');
            const keypadDisplay = document.getElementById('keypadDisplay');
            const keypadButtons = document.querySelectorAll('.keypad-button');
            const errorMessage = document.getElementById('errorMessage');
            const ourMemoriesBox = document.getElementById('ourMemoriesBox');
            const loveCalendarBox = document.getElementById('loveCalendarBox');
            const lovePuzzleBox = document.getElementById('lovePuzzleBox');
            const loveNotesBox = document.getElementById('loveNotesBox'); // New love notes menu box
            const backToMenuBtn = document.getElementById('backToMenuBtn');
            const backToMenuFromCalendarBtn = document.getElementById('backToMenuFromCalendarBtn');
            const ourFacesImage = document.getElementById('ourFacesImage');
            const backToCalendarBtn = document.getElementById('backToCalendarBtn');
            const monthItems = document.querySelectorAll('.month-item');
            const detailImage = document.getElementById('detailImage');
            const backToLoveYearBtn = document.getElementById('backToLoveYearBtn');
            const backToMenuFromPuzzleBtn = document.getElementById('backToMenuFromPuzzleBtn');
            const backToMenuFromSurpriseBtn = document.getElementById('backToMenuFromSurpriseBtn');
            const backToMenuFromNotesBtn = document.getElementById('backToMenuFromNotesBtn'); // Back button for love notes

            // Love Note Modal elements
            const noteModal = document.getElementById('noteModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalText = document.getElementById('modalText');
            const closeModalBtn = document.getElementById('closeModalBtn');
            const loveNotesGrid = document.getElementById('loveNotesGrid');

            // Slider elements
            const sliderWrapper = document.getElementById('sliderWrapper');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const images = sliderWrapper.querySelectorAll('img');
            let currentIndex = 0;

            // Countdown elements
            const yearsSpan = document.getElementById('years');
            const monthsSpan = document.getElementById('months');
            const daysSpan = document.getElementById('days');
            const hoursSpan = document.getElementById('hours');
            const minutesSpan = document.getElementById('minutes');
            const secondsSpan = document.getElementById('seconds');
            const totalDaysSpan = document.getElementById('totalDays');

            // Set your relationship start date here (Year, Month (0-11), Day, Hour, Minute, Second)
            const relationshipStartDate = new Date('2024-10-06T00:00:00');

            let currentPasswordInput = '';
            const correctPassword = '1107';

            // Puzzle elements
            const puzzleArea = document.getElementById('puzzleArea');
            const puzzleSolvedImage = document.getElementById('puzzleSolvedImage');
            const puzzleSolvedMessage = document.getElementById('puzzleSolvedMessage');
            const puzzleImageUrl = 'Image/3.jpg'; // Updated to your image path
            const puzzlePieces = [];
            const gridSize = 3; // 3x3 puzzle

            // Sample Love Notes Data
            const loveNotes = [
                {
                    title: "Our First Date",
                    preview: "A magical evening that started it all...",
                    content: "Remember the day that we went to Kompot it was a grate time event we went alot of people to join us. That's when I knew something special was beginning. Every moment since then has been a beautiful continuation of that first spark. I cherish every memory we've made."
                },
                {
                    title: "Your Beautiful Smile",
                    preview: "The one thing that brightens my day...",
                    content: "Your smile is truly the most beautiful thing. It has the power to brighten even my darkest days and fills my heart with so much joy. Keep smiling, my love, because your happiness is my greatest reward."
                },
                {
                    title: "My Confidante",
                    preview: "You listen without judgment...",
                    content: "Dear my baby and my discussion partner, am gonna say thank you babe for keeping up with me on both serious and random story, and make a lot of memories together😘😘❤️❤️ and Thank you for always being there to listen, without judgment, and with an open heart. You are my confidante, my rock, and the person I can always turn to, no matter what."
                },
                {
                    title: "Our Adventures",
                    preview: "Every journey with you is special...",
                    content: "From spontaneous road trips to quiet evenings at home, every adventure with you is special. You make even the ordinary moments extraordinary. I can't wait for all the new experiences we'll share."
                },
                {
                    title: "My Everything",
                    preview: "You complete me...",
                    content: "You are more than just my partner; you are my best friend, my greatest supporter, and my everything. You complete me in ways I never thought possible. I love you more than words can say."
                },
                {
                    title: "Future Dreams",
                    preview: "Building our future together...",
                    content: "I often find myself dreaming about our future together – all the plans we'll make, the goals we'll achieve, and the beautiful life we'll build. With you, every dream feels within reach."
                }
            ];

            // Function to show a section and hide others
            function showSection(sectionToShow) {
                homepageSection.classList.add('hidden');
                unlockSection.classList.add('hidden');
                orderSection.classList.add('hidden');
                memoriesSection.classList.add('hidden');
                calendarSection.classList.add('hidden');
                loveYearSection.classList.add('hidden');
                imageDetailSection.classList.add('hidden');
                lovePuzzleSection.classList.add('hidden');
                surpriseSection.classList.add('hidden');
                loveNotesSection.classList.add('hidden'); // Hide new love notes section

                // Close modal if open
                closeModal();

                if (sectionToShow === homepageSection || sectionToShow === unlockSection || sectionToShow === orderSection || sectionToShow === memoriesSection || sectionToShow === calendarSection || sectionToShow === loveYearSection || sectionToShow === imageDetailSection || sectionToShow === lovePuzzleSection || sectionToShow === surpriseSection || sectionToShow === loveNotesSection) {
                    document.body.classList.add('justify-center', 'items-center');
                    document.body.classList.remove('flex-col');
                }
                sectionToShow.classList.remove('hidden');
            }

            // Function to update the keypad display
            function updateKeypadDisplay() {
                keypadDisplay.textContent = currentPasswordInput;
                keypadDisplay.classList.remove('correct');
            }

            // Function to update the slider position
            function updateSlider() {
                const imageWidth = images[0].clientWidth;
                sliderWrapper.style.transform = `translateX(${-currentIndex * imageWidth}px)`;
            }

            // Function to update the love calendar countdown
            function updateLoveCalendar() {
                const now = new Date();
                const diff = now.getTime() - relationshipStartDate.getTime(); // Difference in milliseconds

                const totalSeconds = Math.floor(diff / 1000);
                const totalMinutes = Math.floor(totalSeconds / 60);
                const totalHours = Math.floor(totalMinutes / 60);
                const totalDays = Math.floor(totalHours / 24);

                // Calculate years, months, days, hours, minutes, seconds
                // This is a simplified calculation and might not be perfectly accurate for months due to varying month lengths
                const seconds = totalSeconds % 60;
                const minutes = totalMinutes % 60;
                const hours = totalHours % 24;
                const days = totalDays; // Total days since start

                // For years and months, a more complex date calculation is needed for precision.
                // For simplicity, we'll approximate based on days for now.
                const years = Math.floor(days / 365);
                const remainingDaysAfterYears = days % 365;
                const months = Math.floor(remainingDaysAfterYears / 30.44); // Average days in a month

                yearsSpan.textContent = String(years).padStart(2, '0');
                monthsSpan.textContent = String(months).padStart(2, '0');
                daysSpan.textContent = String(days % 30.44).split('.')[0].padStart(2, '0'); // Days remaining in current month
                hoursSpan.textContent = String(hours).padStart(2, '0');
                minutesSpan.textContent = String(minutes).padStart(2, '0');
                secondsSpan.textContent = String(seconds).padStart(2, '0');
                totalDaysSpan.textContent = totalDays; // Display total days

                requestAnimationFrame(updateLoveCalendar); // Continue updating
            }

            // Puzzle functions
            function createPuzzle() {
                puzzleArea.innerHTML = ''; // Clear previous pieces
                puzzleArea.classList.remove('hidden'); // Ensure puzzle area is visible
                puzzleSolvedImage.classList.remove('hidden'); // Ensure solved image is visible (as target)
                puzzleSolvedMessage.classList.add('hidden'); // Ensure message is hidden

                const totalPieces = gridSize * gridSize;
                puzzlePieces.length = 0; // Clear array

                // Create an array of piece indices and shuffle it
                const pieceOrder = Array.from({ length: totalPieces }, (_, i) => i);
                shuffleArray(pieceOrder);

                for (let i = 0; i < totalPieces; i++) {
                    const piece = document.createElement('div');
                    piece.classList.add('puzzle-piece');
                    piece.draggable = true;
                    piece.dataset.originalIndex = i; // Store original index
                    // Use the shuffled index for initial display
                    piece.dataset.currentIndex = pieceOrder[i];

                    // Calculate background position for each piece based on its *original* position
                    const originalRow = Math.floor(i / gridSize);
                    const originalCol = i % gridSize;
                    const bgX = (originalCol / (gridSize - 1)) * 100;
                    const bgY = (originalRow / (gridSize - 1)) * 100;

                    // Set CSS variables for background properties
                    piece.style.setProperty('--bg-image', `url(${puzzleImageUrl})`);
                    piece.style.setProperty('--bg-position', `${bgX}% ${bgY}%`);
                    piece.style.setProperty('--bg-size', `${gridSize * 100}% ${gridSize * 100}%`);

                    puzzleArea.appendChild(piece);
                    puzzlePieces.push(piece);
                }

                // Reorder the DOM elements based on the shuffled pieceOrder
                const shuffledElements = [];
                for (let i = 0; i < totalPieces; i++) {
                    shuffledElements[pieceOrder[i]] = puzzlePieces[i];
                }
                puzzleArea.innerHTML = ''; // Clear again to re-append in shuffled order
                shuffledElements.forEach(el => puzzleArea.appendChild(el));


                addPuzzleEventListeners();
            }

            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]]; // Swap elements
                }
            }

            let draggedItem = null;

            function addPuzzleEventListeners() {
                // Remove previous listeners to prevent duplicates if createPuzzle is called again
                puzzlePieces.forEach(piece => {
                    piece.removeEventListener('dragstart', handleDragStart);
                    piece.removeEventListener('dragend', handleDragEnd);
                    piece.removeEventListener('dragover', handleDragOver);
                    piece.removeEventListener('dragenter', handleDragEnter);
                    piece.removeEventListener('dragleave', handleDragLeave);
                    piece.removeEventListener('drop', handleDrop);
                });

                // Add new listeners
                puzzlePieces.forEach(piece => {
                    piece.addEventListener('dragstart', handleDragStart);
                    piece.addEventListener('dragend', handleDragEnd);
                    piece.addEventListener('dragover', handleDragOver);
                    piece.addEventListener('dragenter', handleDragEnter);
                    piece.addEventListener('dragleave', handleDragLeave);
                    piece.addEventListener('drop', handleDrop);
                });
            }

            function handleDragStart(e) {
                draggedItem = this;
                setTimeout(() => this.classList.add('dragging'), 0);
            }

            function handleDragEnd() {
                draggedItem.classList.remove('dragging');
                draggedItem = null;
                checkPuzzleSolved();
            }

            function handleDragOver(e) {
                e.preventDefault(); // Allow drop
            }

            function handleDragEnter(e) {
                e.preventDefault();
                if (this !== draggedItem) {
                    this.style.opacity = '0.5'; // Visual feedback for drag over
                }
            }

            function handleDragLeave() {
                this.style.opacity = '1';
            }

            function handleDrop(e) {
                e.preventDefault();
                this.style.opacity = '1';

                if (draggedItem && draggedItem !== this) {
                    const draggedOriginalIndex = parseInt(draggedItem.dataset.originalIndex);
                    const targetOriginalIndex = parseInt(this.dataset.originalIndex);

                    // Swap the actual DOM elements
                    const tempNode = document.createElement('div'); // Temporary placeholder
                    draggedItem.parentNode.insertBefore(tempNode, draggedItem);
                    this.parentNode.insertBefore(draggedItem, this);
                    tempNode.parentNode.insertBefore(this, tempNode);
                    tempNode.parentNode.removeChild(tempNode);

                    // No need to update `currentIndex` data attributes, as `checkPuzzleSolved` now relies on DOM order
                }
            }


            function checkPuzzleSolved() {
                let solved = true;
                // Iterate through the DOM elements in the puzzleArea
                const currentPiecesInOrder = Array.from(puzzleArea.children);
                for (let i = 0; i < currentPiecesInOrder.length; i++) {
                    // Check if the original index of the piece at this DOM position matches the expected sequential index
                    if (parseInt(currentPiecesInOrder[i].dataset.originalIndex) !== i) {
                        solved = false;
                        break;
                    }
                }

                if (solved) {
                    puzzleArea.classList.add('hidden'); // Hide puzzle pieces
                    puzzleSolvedImage.classList.remove('hidden'); // Ensure solved image is visible
                    puzzleSolvedMessage.classList.remove('hidden'); // Show solved message
                    // Trigger surprise after a short delay
                    setTimeout(() => {
                        showSection(surpriseSection);
                    }, 1500); // 1.5 second delay
                } else {
                    puzzleArea.classList.remove('hidden'); // Ensure puzzle pieces are visible
                    puzzleSolvedMessage.classList.add('hidden'); // Hide solved message
                }
            }

            // Love Notes functions
            function renderLoveNotes() {
                loveNotesGrid.innerHTML = ''; // Clear existing notes
                loveNotes.forEach(note => {
                    const noteCard = document.createElement('div');
                    noteCard.classList.add('note-card');
                    noteCard.innerHTML = `
                        <h3>${note.title}</h3>
                        <p>${note.preview}</p>
                    `;
                    noteCard.addEventListener('click', () => openModal(note.title, note.content));
                    loveNotesGrid.appendChild(noteCard);
                });
            }

            function openModal(title, content) {
                modalTitle.textContent = title;
                modalText.textContent = content;
                noteModal.classList.add('visible');
                noteModal.classList.remove('hidden');
            }

            function closeModal() {
                noteModal.classList.remove('visible');
                noteModal.classList.add('hidden');
                modalTitle.textContent = '';
                modalText.textContent = '';
            }

            // Homepage cake generation logic
            const generatedCakeContainer = document.getElementById('generatedCakeContainer');
            const cakePrompt = "a two-tiered birthday cake with pastel pink, mint green, and light blue frosting, topped with red cherries, and a wavy, abstract icing design. The cake should look cute and celebratory.";

            async function generateCakeImage() {
                try {
                    const payload = { instances: { prompt: cakePrompt }, parameters: { "sampleCount": 1 } };
                    const apiKey = ""; // If you want to use models other than imagen-3.0-generate-002, provide an API key here. Otherwise, leave this as-is.
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();

                    if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
                        const imageUrl = `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
                        generatedCakeContainer.innerHTML = `<img src="${imageUrl}" alt="Generated Birthday Cake">`;
                    } else {
                        generatedCakeContainer.innerHTML = `<p class="error-message text-red-500">Failed to generate cake image. Please try again.</p>`;
                    }
                } catch (error) {
                    console.error('Error generating cake image:', error);
                    generatedCakeContainer.innerHTML = `<p class="error-message text-red-500">An error occurred while generating cake: ${error.message}.</p>`;
                }
            }


            // Initially show the homepage
            showSection(homepageSection);
            updateKeypadDisplay(); // Initialize display for unlock section

            // Event listener for the Start button
            startButton.addEventListener('click', function () {
                birthdaySong.play(); // Play the song
                setTimeout(() => {
                    showSection(unlockSection);
                    currentPasswordInput = '';
                    updateKeypadDisplay();
                    errorMessage.textContent = '';
                }, 500);
            });

            // Event listeners for keypad buttons
            keypadButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const value = this.dataset.value;

                    if (value === 'clear') {
                        currentPasswordInput = '';
                    } else if (value === 'back') {
                        currentPasswordInput = currentPasswordInput.slice(0, -1);
                    } else {
                        if (currentPasswordInput.length < correctPassword.length) {
                            currentPasswordInput += value;
                        }
                    }

                    updateKeypadDisplay();
                    errorMessage.textContent = '';

                    if (currentPasswordInput.length === correctPassword.length) {
                        if (currentPasswordInput === correctPassword) {
                            keypadDisplay.classList.add('correct');
                            errorMessage.textContent = 'Unlocked!';
                            setTimeout(() => {
                                showSection(orderSection);
                                currentPasswordInput = '';
                                keypadDisplay.classList.remove('correct');
                            }, 1000);
                        } else {
                            errorMessage.textContent = 'Incorrect code. Try again!';
                            currentPasswordInput = '';
                            setTimeout(() => updateKeypadDisplay(), 300);
                        }
                    }
                });
            });

            // Event listener for "Our Memories" menu box
            ourMemoriesBox.addEventListener('click', function () {
                showSection(memoriesSection);
                currentIndex = 0;
                updateSlider();
            });

            // Event listener for "Love Calendar" menu box
            loveCalendarBox.addEventListener('click', function () {
                showSection(calendarSection);
                updateLoveCalendar(); // Start the countdown
            });

            // Event listener for "Love Puzzle" menu box
            lovePuzzleBox.addEventListener('click', function () {
                showSection(lovePuzzleSection);
                createPuzzle(); // Initialize and shuffle puzzle
            });

            // Event listener for "Love Notes" menu box
            loveNotesBox.addEventListener('click', function () {
                showSection(loveNotesSection);
                renderLoveNotes(); // Render the love notes
            });

            // Event listener for "Our Faces" image on calendar page
            ourFacesImage.addEventListener('click', function () {
                showSection(loveYearSection);
            });

            // Event listener for each month item in "Our Love Year"
            monthItems.forEach(item => {
                item.addEventListener('click', function () {
                    const imageUrl = this.dataset.monthImg;
                    detailImage.src = imageUrl;
                    showSection(imageDetailSection);
                });
            });

            // Event listener for "Back to Menu" button on memories page
            backToMenuBtn.addEventListener('click', function () {
                showSection(orderSection);
            });

            // Event listener for "Back to Menu" button on calendar page
            backToMenuFromCalendarBtn.addEventListener('click', function () {
                showSection(orderSection);
            });

            // Event listener for "Back to Calendar" button on love year page
            backToCalendarBtn.addEventListener('click', function () {
                showSection(calendarSection);
            });

            // Event listener for "Back to Love Year" button on image detail page
            backToLoveYearBtn.addEventListener('click', function () {
                showSection(loveYearSection);
            });

            // Event listener for "Back to Menu" button on puzzle page
            backToMenuFromPuzzleBtn.addEventListener('click', function () {
                showSection(orderSection);
            });

            // Event listener for "Back to Menu" button on surprise page
            backToMenuFromSurpriseBtn.addEventListener('click', function () {
                showSection(orderSection);
            });

            // Event listener for "Back to Menu" button on love notes page
            backToMenuFromNotesBtn.addEventListener('click', function () {
                showSection(orderSection);
            });

            // Event listener for closing the modal
            closeModalBtn.addEventListener('click', closeModal);
            noteModal.addEventListener('click', (e) => {
                if (e.target === noteModal) { // Close only if clicking on the overlay, not the content
                    closeModal();
                }
            });

            // Slider navigation
            prevBtn.addEventListener('click', function () {
                currentIndex = (currentIndex > 0) ? currentIndex - 1 : images.length - 1;
                updateSlider();
            });

            nextBtn.addEventListener('click', function () {
                currentIndex = (currentIndex < images.length - 1) ? currentIndex + 1 : 0;
                updateSlider();
            });

            // Update slider on window resize to ensure correct positioning
            window.addEventListener('resize', updateSlider);
        });
    </script>
</body>

</html>